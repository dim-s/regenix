{"name":"Regenix","tagline":"Easy & Power MVC framework for PHP","body":"Welcome to Regenix framework\r\n============================\r\n\r\nRegenix is easy-to-learn and powerful MVC framework. Our framework is similar to [Play! Framework](http://playframework.com/),\r\nRuby on Rails and Django frameworks, but has a lot of unique ideas.\r\n\r\n[![Build Status](https://travis-ci.org/dim-s/regenix.png?branch=dev)](https://travis-ci.org/dim-s/regenix)\r\n\r\n![regenix](http://develstudio.ru/upload/medialibrary/cf8/cf88db498096a1eba21c75f7910a4ef4.png)\r\n\r\nFeatures\r\n--------\r\n* Clear MVC architecture.\r\n* Multiple applications within one core.\r\n* Easy and powerful routing (sub-routing, inserts, etc).\r\n* Easy debugging, displaying errors in the detailed form.\r\n* [Propel ORM](http://propelorm.org/) integration for models\r\n* Dependency Manager for assets and modules (git, local repos).\r\n* REST and other special types of controllers.\r\n* Dependency Injection Container.\r\n* Convenient validators like tests.\r\n* Fast template engine with simple syntax.\r\n* Lazy loading of classes.\r\n* Smart scanner for searching classes.\r\n* HTTP util classes: Session, Flash, Headers, Query, Body, etc.\r\n* Smart logger, logging any errors (even fatal and parse).\r\n* CLI for managing applications.\r\n* I18n features.\r\n* Unit and Functional Tests (own implementation)\r\n\r\n\r\nRequires\r\n--------\r\n\r\n* PHP 5.3 or greater\r\n* Apache, Nginx or another server\r\n* Mod_rewrite enabled (for apache)\r\n\r\nDocumentation (in progress)\r\n-------------\r\n\r\nhttps://github.com/dim-s/regenix-documentation\r\n\r\n+ [Installation](https://github.com/dim-s/regenix-documentation/blob/master/en/installation.md)\r\n+ [Configuration](https://github.com/dim-s/regenix-documentation/blob/master/en/configuration.md)\r\n+ [Bootstraps](https://github.com/dim-s/regenix-documentation/blob/master/en/bootstraps.md)\r\n+ [Controllers](https://github.com/dim-s/regenix-documentation/blob/master/en/controllers.md)\r\n+ [Views](https://github.com/dim-s/regenix-documentation/blob/master/en/views.md)\r\n+ [Validation](https://github.com/dim-s/regenix-documentation/blob/master/en/validation.md)\r\n+ [Localization (i18n)](https://github.com/dim-s/regenix-documentation/blob/master/en/i18n.md)\r\n+ [Logging](https://github.com/dim-s/regenix-documentation/blob/master/en/logs.md)\r\n+ [CLI for regenix](https://github.com/dim-s/regenix-documentation/blob/master/en/cli.md)\r\n+ [Class Scanner](https://github.com/dim-s/regenix-documentation/blob/master/en/class_scanner.md)\r\n+ [Performance](https://github.com/dim-s/regenix-documentation/blob/master/en/performance.md)\r\n\r\nGetting started\r\n---------------\r\n\r\n### Installation\r\n\r\nClone all the sources from our git repo. Our framework contains a few vendor libraries as git submodules, \r\ntherefore you need to run `git submodule init` and `git submodule update` after cloning repo.\r\n\r\n\r\nNext, create a directory in the location `/apps/` of your copy of the framework.\r\nThis directory will be the directory of a project. For example, you can name it like `myApp`. Then the full path of your \r\napp will be `<framework_path>/apps/myApp/`. \r\n\r\nThe directory `/apps/` contains all applications and that allows to use one copy of the framework for\r\nseveral projects. You do not need something like symlinks in Linux to support a few applications. \r\n\r\nThe next step, you need to know the typical structure of an application.\r\n\r\n* `conf/` - configurations\r\n * `conf/application.conf` - the general config\r\n * `conf/deps.json` - the configuration of asset and module dependencies\r\n * `conf/route` - the url routing config\r\n * `conf/routes/` - directory of sub-routes\r\n * `conf/orm/` - configurations for Propel ORM (schema.xml, built.properties, etc.)\r\n* `src/` - php sources of your application\r\n * `src/controllers/`\r\n * `src/models/`\r\n * `src/views/`\r\n * `src/notifiers/` - notifiers for mail sending messages\r\n * `src/*` - other packages of sources\r\n * `Bootstrap.php` - a bootstrap file with a Bootstrap class (not required)\r\n* `tests/` - sources of unit and functional tests\r\n* `assets/` - local asset directory of your app\r\n\r\n---\r\n\r\n#### Create an application from template\r\n\r\nOpen your console and cd to a root directory of Regenix. There will be `regenix` and `regenix.bat` \r\nfiles and therefore the command `regenix` will become available. Then use the special command `regenix new <name>` to\r\ncreate a new application from template.\r\n\r\n    cd /path/to/root_of_server_with_regenix/\r\n    regenix new myApp\r\n    \r\nAfter this, a new directory `myApp` will appear in `<root>/apps`. To check it is working or not, open\r\nyour browser and navigate to `http://localhost/myApp`. This template application will help you to \r\nunderstand how create a typical application for Regenix.\r\n\r\n---\r\n\r\n## Publications\r\n\r\n+ [Twitter](https://twitter.com/regenixnews)\r\n+ http://habrahabr.ru/post/196604/ (Russian)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}